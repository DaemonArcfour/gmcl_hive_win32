#pragma once
#include "hive_dependencies.h"

class CEngineTool03 {
public:
	virtual			~CEngineTool03(void) {};
	virtual void* GetToolCount(void)const = 0;
	virtual void* GetToolName(int)const = 0;
	virtual void* SwitchToTool(int) = 0;
	virtual bool IsTopmostTool(IToolSystem const*)const = 0;
	virtual void* GetToolSystem(int)const = 0;
	virtual void* GetTopmostTool(void) = 0;
	virtual void* ShowCursor(bool) = 0;
	virtual bool IsCursorVisible(void)const = 0;
	virtual void* GetServerFactory(void * (*&)(char const*, int *)) = 0;
	virtual void* GetClientFactory(void * (*&)(char const*, int *)) = 0;
	virtual void* GetSoundDuration(char const*) = 0;
	virtual bool IsSoundStillPlaying(int) = 0;
	virtual void* StartSound(int, bool, int, int, char const*, float, soundlevel_t, Vector const&, Vector const&, int, int, bool, float, int) = 0;
	virtual void* StopSoundByGuid(int) = 0;
	virtual void* GetSoundDuration(int) = 0;
	virtual bool IsLoopingSound(int) = 0;
	virtual void* ReloadSound(char const*) = 0;
	virtual void* StopAllSounds(void) = 0;
	virtual void* GetMono16Samples(char const*, CUtlVector<short, CUtlMemory<short, int>> &) = 0;
	virtual void* SetAudioState(AudioState_t const&) = 0;
	virtual void* Command(char const*) = 0;
	virtual void* Execute(void) = 0;
	virtual void* GetCurrentMap(void) = 0;
	virtual void* ChangeToMap(char const*) = 0;
	virtual bool IsMapValid(char const*) = 0;
	virtual void* RenderView(CViewSetup &, int, int) = 0;
	virtual bool IsInGame(void) = 0;
	virtual bool IsConnected(void) = 0;
	virtual void* GetMaxClients(void) = 0;
	virtual bool IsGamePaused(void) = 0;
	virtual void* SetGamePaused(bool) = 0;
	virtual void* GetTimescale(void) = 0;
	virtual void* SetTimescale(float) = 0;
	virtual void* GetRealTime(void) = 0;
	virtual void* GetRealFrameTime(void) = 0;
	virtual void* Time(void) = 0;
	virtual void* HostFrameTime(void) = 0;
	virtual void* HostTime(void) = 0;
	virtual void* HostTick(void) = 0;
	virtual void* HostFrameCount(void) = 0;
	virtual void* ServerTime(void) = 0;
	virtual void* ServerFrameTime(void) = 0;
	virtual void* ServerTick(void) = 0;
	virtual void* ServerTickInterval(void) = 0;
	virtual void* ClientTime(void) = 0;
	virtual void* ClientFrameTime(void) = 0;
	virtual void* ClientTick(void) = 0;
	virtual void* SetClientFrameTime(float) = 0;
	virtual void* ForceUpdateDuringPause(void) = 0;
	virtual void* GetModel(unsigned int) = 0;
	virtual void* GetStudioModel(unsigned int) = 0;
	virtual void* Con_NPrintf(int, char const*, ...) = 0;
	virtual void* Con_NXPrintf(char const*, char const*, ...) = 0;
	virtual void* GetGameDir(char *, int) = 0;
	virtual void* GetScreenSize(int &, int &) = 0;
	virtual void* SetMainView(Vector const&, QAngle const&) = 0;
	virtual void* GetPlayerView(CViewSetup &, int, int, int, int) = 0;
	virtual void* CreatePickingRay(CViewSetup const&, int, int, Vector &, Vector &) = 0;
	virtual void* PrecacheSound(char const*, bool) = 0;
	virtual void* PrecacheModel(char const*, bool) = 0;
	virtual void* InstallQuitHandler(void *, bool(*)(void *)) = 0;
	virtual void* TakeTGAScreenShot(char const*, int, int) = 0;
	virtual void* ForceSend(void) = 0;
	virtual bool IsRecordingMovie(void) = 0;
	virtual void* StartMovieRecording(KeyValues *) = 0;
	virtual void* EndMovieRecording(void) = 0;
	virtual void* CancelMovieRecording(void) = 0;
	virtual void* GetActiveVideoRecorder(void) = 0;
	virtual void* StartRecordingVoiceToFile(char const*, char const*) = 0;
	virtual void* StopRecordingVoiceToFile(void) = 0;
	virtual bool IsVoiceRecording(void) = 0;
	virtual void* TraceRay(Ray_t const&, unsigned int, ITraceFilter *, CBaseTrace *) = 0;
	virtual void* TraceRayServer(Ray_t const&, unsigned int, ITraceFilter *, CBaseTrace *) = 0;
	virtual bool IsConsoleVisible(void) = 0;
	virtual void* GetPointContents(Vector const&) = 0;
	virtual void* GetActiveDLights(dlight_t **) = 0;
	virtual void* GetLightingConditions(Vector const&, Vector*, int, LightDesc_t *) = 0;
	virtual void* GetWorldToScreenMatrixForView(CViewSetup const&, VMatrix *) = 0;
	virtual void* CreatePartitionHandle(IHandleEntity *, int, Vector const&, Vector const&) = 0;
	virtual void* DestroyPartitionHandle(unsigned short) = 0;
	virtual void* InstallPartitionQueryCallback(IPartitionQueryCallback *) = 0;
	virtual void* RemovePartitionQueryCallback(IPartitionQueryCallback *) = 0;
	virtual void* ElementMoved(unsigned short, Vector const&, Vector const&) = 0;
	virtual bool SetIsInGame(bool) = 0;
};