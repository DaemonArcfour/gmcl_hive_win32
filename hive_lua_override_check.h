#pragma once
#include "hive_dependencies.h"
class _CLuaInterface
{
public:
	void *vtable;
	lua_State *L;
};

class COriginalFunction {
public:
	DWORD original_address = 0x0;
	DWORD new_address = 0x0;
	std::string function_name = "\0";
};
typedef double lua_Number;
typedef ptrdiff_t lua_Integer;

typedef const void*(__cdecl *t_lua_topointer)(lua_State *L, int index);
typedef void*(__cdecl *t_lua_Alloc)(void* ud, void* ptr, size_t osize, size_t nsize);
typedef int(__cdecl *t_lua_CFunction) (lua_State *L);
typedef int(__cdecl *t_lua_checkstack) (lua_State *L, int extra);
typedef void(__cdecl *t_lua_close)(lua_State *L);
typedef void(__cdecl *t_lua_concat)(lua_State *L, int n);
typedef int(__cdecl *t_lua_cpcall)(lua_State *L, t_lua_CFunction func, void* ud);
typedef void(__cdecl *t_lua_createtable)(lua_State *L, int narr, int nrec);
typedef void(__cdecl *t_lua_call)(lua_State *L, int nargs, int nresults);
typedef int(__cdecl *t_lua_dump)(lua_State *L, void* writer, void* data);
typedef int(__cdecl *t_lua_equal)(lua_State *L, int index1, int index2);
typedef int(__cdecl *t_lua_error)(lua_State *L);
typedef int(__cdecl *t_lua_gc)(lua_State *L, int what, int data);
typedef void*(__cdecl *t_lua_getallocf)(lua_State *L, void **ud);
typedef void(__cdecl *t_lua_getfenc)(lua_State *L, int index);
typedef void(__cdecl *t_lua_getfield)(lua_State *L, int index, const char *k);
typedef void(__cdecl *t_lua_getglobal)(lua_State *L, const char *name);
typedef int(__cdecl *t_lua_getmetatable)(lua_State *L, int index);
typedef void(__cdecl *t_lua_gettable)(lua_State *L, int index);
typedef int(__cdecl *t_lua_gettop)(lua_State *L);
typedef void(__cdecl *t_lua_insert)(lua_State *L, int index);
typedef int(__cdecl *t_lua_isboolean)(lua_State *L, int index);
typedef int(__cdecl *t_lua_iscfunction)(lua_State *L, int index);
typedef int(__cdecl *t_lua_isfunction)(lua_State *L, int index);
typedef int(__cdecl *t_lua_islightuserdata)(lua_State *L, int index);
typedef int(__cdecl *t_lua_isnil)(lua_State *L, int index);
typedef int(__cdecl *t_lua_isnone)(lua_State *L, int index);
typedef int(__cdecl *t_lua_isnoneornil)(lua_State *L, int index);
typedef int(__cdecl *t_lua_isnumber)(lua_State *L, int index);
typedef int(__cdecl *t_lua_isstring)(lua_State *L, int index);
typedef int(__cdecl *t_lua_istable)(lua_State *L, int index);
typedef int(__cdecl *t_lua_isthread)(lua_State *L, int index);
typedef int(__cdecl *t_lua_isuserdata)(lua_State *L, int index);
typedef int(__cdecl *t_lua_lessthan)(lua_State *L, int index1, int index2);
typedef int(__cdecl *t_lua_load)(lua_State *L, void* reader, void* data, const char* chunkname);
typedef void*(__cdecl *t_lua_newstate)(void *f, void *ud);
typedef void(__cdecl *t_lua_newtable)(lua_State *L);
typedef void*(__cdecl *t_lua_newthread)(lua_State *L);
typedef void*(__cdecl *t_lua_newuserdata)(lua_State *L, size_t size);
typedef int(__cdecl *t_lua_next)(lua_State *L, int index);
typedef size_t(__cdecl *t_lua_objlen)(lua_State *L, int index);
typedef int(__cdecl *t_lua_pcall)(lua_State *L, int nargs, int nresults, int errfunc);
typedef void(__cdecl *t_lua_pop)(lua_State *L, int n);
typedef void(__cdecl *t_lua_pushboolean)(lua_State *L, int b);
typedef void(__cdecl *t_lua_pushcclosure)(lua_State *L, void* fn, int n);
typedef void(__cdecl *t_lua_pushcfunction)(lua_State *L, void* f);
typedef const char*(__cdecl *t_lua_pushfstring)(lua_State *L, const char *fmt, ...);
typedef void(__cdecl *t_lua_pushinteger)(lua_State *L, lua_Integer n);
typedef void(__cdecl *t_lua_pushlightuserdata)(lua_State *L, void *p);
typedef void(__cdecl *t_lua_pushliteral)(lua_State *L, const char *s);
typedef void(__cdecl *t_lua_pushlstring)(lua_State *L, const char *s, size_t len);
typedef void(__cdecl *t_lua_pushnil)(lua_State *L);
typedef void(__cdecl *t_lua_pushnumber)(lua_State *L, lua_Number n);
typedef void(__cdecl *t_lua_pushstring)(lua_State *L, const char *s);
typedef int(__cdecl *t_lua_pushthread)(lua_State *L);
typedef void(__cdecl *t_lua_pushvalue)(lua_State *L, int index);
typedef const char*(__cdecl *t_lua_pushvfstring)(lua_State *L, const char *fmt, va_list argp);
typedef int(__cdecl *t_lua_rawequal)(lua_State *L, int index1, int index2);
typedef void(__cdecl *t_lua_rawget)(lua_State *L, int index);
typedef void(__cdecl *t_lua_rawgeti)(lua_State *L, int index, int n);
typedef void(__cdecl *t_lua_rawset)(lua_State *L, int index);
typedef void(__cdecl *t_lua_rawseti)(lua_State *L, int index, int n);
typedef const char*(__cdecl *t_lua_reader)(lua_State *L, void *data, size_t *size);
typedef void(__cdecl *t_lua_register)(lua_State *L, const char* name, void* f);
typedef void(__cdecl *t_lua_remove)(lua_State *L, int index);
typedef void(__cdecl *t_lua_replace)(lua_State *L, int index);
typedef int(__cdecl *t_lua_resume)(lua_State *L, int narg);
typedef void(__cdecl *t_lua_setallocf)(lua_State *L, t_lua_Alloc f, void *ud);
typedef int(__cdecl *t_lua_setfenc)(lua_State *L, int index);
typedef void(__cdecl *t_lua_setfield)(lua_State *L, int index, const char *k);
typedef void(__cdecl *t_lua_setglobal)(lua_State *L, const char *name);
typedef int(__cdecl *t_lua_setmetatable)(lua_State *L, int index);
typedef void(__cdecl *t_lua_settable)(lua_State *L, int index);
typedef void(__cdecl *t_lua_settop)(lua_State *L, int index);
typedef int(__cdecl *t_lua_status)(lua_State *L);
typedef int(__cdecl *t_lua_toboolean)(lua_State *L, int index);
typedef void*(__cdecl *t_lua_tocfunction)(lua_State *L, int index);
typedef lua_Integer(__cdecl *t_lua_tointeger)(lua_State *L, int index);
typedef const char*(__cdecl *t_lua_tolstring)(lua_State *L, int index, size_t *len);
typedef lua_Number(__cdecl *t_lua_tonumber)(lua_State *L, int index);
typedef const char*(__cdecl *t_lua_tostring)(lua_State *L, int index);
typedef lua_State*(__cdecl *t_lua_tothread)(lua_State *L, int index);
typedef void*(__cdecl *t_lua_touserdata)(lua_State *L, int index);
typedef int(__cdecl *t_lua_type)(lua_State *L, int index);
typedef const char*(__cdecl *t_lua_typename)(lua_State *L, int tp);
typedef void(__cdecl *t_lua_xmove)(lua_State *from, lua_State *to, int n);

namespace HiveLUA {
	extern t_lua_topointer lua_topointer;
	extern t_lua_Alloc lua_Alloc;
	extern t_lua_call lua_call;
	extern t_lua_CFunction lua_CFunction;
	extern t_lua_checkstack lua_checkstack;
	extern t_lua_close lua_close;
	extern t_lua_concat lua_concat;
	extern t_lua_pcall lua_cpcall;
	extern t_lua_createtable lua_createtable;
	extern t_lua_dump lua_dump;
	extern t_lua_equal lua_equal;
	extern t_lua_error lua_error;
	extern t_lua_gc lua_gc;
	extern t_lua_getallocf lua_getallocf;
	extern t_lua_getfield lua_getfield;
	extern t_lua_getglobal lua_getglobal;
	extern t_lua_getmetatable lua_getmetatable;
	extern t_lua_gettable lua_gettable;
	extern t_lua_gettop lua_gettop;
	extern t_lua_insert lua_insert;
	extern t_lua_isboolean lua_isboolean;
	extern t_lua_iscfunction lua_iscfunction;
	extern t_lua_isfunction lua_isfunction;
	extern t_lua_islightuserdata lua_islightuserdata;
	extern t_lua_isnil lua_isnil;
	extern t_lua_isnone lua_isnone;
	extern t_lua_isnoneornil lua_isnoneornil;
	extern t_lua_isnumber lua_isnumber;
	extern t_lua_isstring lua_isstring;
	extern t_lua_istable lua_istable;
	extern t_lua_isthread lua_isthread;
	extern t_lua_isuserdata lua_isuserdata;
	extern t_lua_lessthan lua_lessthan;
	extern t_lua_load lua_load;
	extern t_lua_newstate lua_newstate;
	extern t_lua_newtable lua_newtable;
	extern t_lua_newthread lua_newthread;
	extern t_lua_newuserdata lua_newuserdata;
	extern t_lua_next lua_next;
	extern t_lua_objlen lua_objlen;
	extern t_lua_pcall lua_pcall;
	extern t_lua_pop lua_pop;
	extern t_lua_pushboolean lua_pushboolean;
	extern t_lua_pushcclosure lua_pushcclosure;
	extern t_lua_pushcfunction lua_pushcfunction;
	extern t_lua_pushfstring lua_pushfstring;
	extern t_lua_pushinteger lua_pushinteger;
	extern t_lua_pushlightuserdata lua_pushlightuserdata;
	extern t_lua_pushliteral lua_pushliteral;
	extern t_lua_pushlstring lua_pushlstring;
	extern t_lua_pushnil lua_pushnil;
	extern t_lua_pushnumber lua_pushnumber;
	extern t_lua_pushstring lua_pushstring;
	extern t_lua_pushthread lua_pushthread;
	extern t_lua_pushvalue lua_pushvalue;
	extern t_lua_pushvfstring lua_pushvfstring;
	extern t_lua_rawequal lua_rawequal;
	extern t_lua_rawget lua_rawget;
	extern t_lua_rawgeti lua_rawgeti;
	extern t_lua_rawset lua_rawset;
	extern t_lua_rawseti lua_rawseti;
	extern t_lua_reader lua_Reader;
	extern t_lua_register lua_register;
	extern t_lua_remove lua_remove;
	extern t_lua_replace lua_replace;
	extern t_lua_resume lua_resume;
	extern t_lua_setallocf lua_setallocf;
	extern t_lua_setfield lua_setfield;
	extern t_lua_setglobal lua_setglobal;
	extern t_lua_settable lua_settable;
	extern t_lua_settop lua_settop;
	extern t_lua_setmetatable lua_setmetatable;
	extern t_lua_status lua_status;
	extern t_lua_toboolean lua_toboolean;
	extern t_lua_tocfunction lua_tocfunction;
	extern t_lua_tointeger lua_tointeger;
	extern t_lua_tolstring lua_tolstring;
	extern t_lua_tonumber lua_tonumber;
	extern t_lua_topointer lua_topointer;
	extern t_lua_tostring lua_tostring;
	extern t_lua_tothread lua_tothread;
	extern t_lua_touserdata lua_touserdata;
	extern t_lua_type lua_type;
	extern t_lua_typename lua_typename;
	lua_State* GetLuaState(ILuaInterface* ClientInterface);
	void GetFunctions(ILuaInterface* ClientInterface, std::vector<COriginalFunction*> &Functions);
	void CompareFunctionLists(std::vector<COriginalFunction*> FListOriginal, std::vector<COriginalFunction*> FListNew, std::vector<COriginalFunction*> &FListOverridden);
	void RecycleFunctionList(std::vector<COriginalFunction*> &FunctionList);
}

extern std::vector<COriginalFunction*> LUA_OriginalFunctions;
extern std::vector<COriginalFunction*> LUA_Functions;